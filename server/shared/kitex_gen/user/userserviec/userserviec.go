// Code generated by Kitex v0.7.2. DO NOT EDIT.

package userserviec

import (
	"context"
	user "github.com/Nero011/cloudStorage/server/shared/kitex_gen/user"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiecServiceInfo
}

var userServiecServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserServiec"
	handlerType := (*user.UserServiec)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register": kitex.NewMethodInfo(registerHandler, newUserServiecRegisterArgs, newUserServiecRegisterResult, false),
		"Login":    kitex.NewMethodInfo(loginHandler, newUserServiecLoginArgs, newUserServiecLoginResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": `../idl/rpc/user.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiecRegisterArgs)
	realResult := result.(*user.UserServiecRegisterResult)
	success, err := handler.(user.UserServiec).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiecRegisterArgs() interface{} {
	return user.NewUserServiecRegisterArgs()
}

func newUserServiecRegisterResult() interface{} {
	return user.NewUserServiecRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiecLoginArgs)
	realResult := result.(*user.UserServiecLoginResult)
	success, err := handler.(user.UserServiec).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiecLoginArgs() interface{} {
	return user.NewUserServiecLoginArgs()
}

func newUserServiecLoginResult() interface{} {
	return user.NewUserServiecLoginResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *user.RegisterRequest) (r *user.RegisterResponse, err error) {
	var _args user.UserServiecRegisterArgs
	_args.Req = req
	var _result user.UserServiecRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.LoginRequest) (r *user.LoginResponse, err error) {
	var _args user.UserServiecLoginArgs
	_args.Req = req
	var _result user.UserServiecLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
